/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define MO_TOG(layer) &mo_tog layer layer

#define BASE 0
#define NAVSYM 1
#define NUM 2
#define EXP 3

/ {
        Behaviors {
            td_mt: tap_dance_mod_tap {
                compatible = "zmk,behavior-tap-dance";
                label = "TAP_DANCE_MOD_TAP";
                #binding-cells = <0>;
                tapping-term-ms = <200>;
                bindings = <&mt LSHIFT CAPSLOCK>, <&kp LCTRL>;
            };


            mo_tog: behavior_mo_tog {
                compatible = "zmk,behavior-hold-tap";
                label = "mo_tog";
                #binding-cells = <2>;
                flavor = "hold-preferred";
                tapping-term-ms = <200>;
                bindings = <&mo>, <&tog>;
            };
        };

        keymap {
                compatible = "zmk,keymap";

                base_layer {
                      bindings = <
   &tog EXP   &kp Q  &kp W  &kp F        &kp P      &kp B        &kp J     &kp L      &kp U      &kp Y    &kp SEMI  &kp SQT
   &kp BSLH   &kp A  &kp R  &kp S        &kp T      &kp G        &kp M     &kp N      &kp E      &kp I    &kp O     &kp MINUS
   &kp LALT   &kp Z  &kp X  &kp C        &kp D      &kp V        &kp K     &kp H      &kp COMMA  &kp DOT  &kp FSLH  &kp GRAVE
                            MO_TOG(NUM)  &td_mt     &kp LGUI     &kp RALT  &kp SPACE  MO_TOG(NAVSYM)  
                        >;
                };

                navsym_layer {
                        bindings = <
   &trans     &kp EXCL  &kp AMPS    &kp LBRC  &kp RBRC  &kp CARET    &trans  &trans    &trans     &trans     &trans     &trans
   &kp TILDE  &kp HASH  &kp AT      &kp LBKT  &kp RBKT  &kp PRCNT    &trans  &kp LEFT  &kp DOWN   &kp UP     &kp RIGHT  &trans
   &trans     &kp DLLR  &kp RA(N5)  &kp LT    &kp GT    &kp BSLH     &trans  &trans    &kp PG_DN  &kp PG_UP  &trans     &trans
                                    &kp LPAR  &kp RPAR  &kp UNDER    &trans  &trans    &to BASE
                        >;
                };

                num_layer {
                        bindings = <
   &trans  &kp F9  &kp F10  &kp F11   &kp F12  &trans      &kp KP_MULTIPLY  &kp N7  &kp N8      &kp N9  &kp KP_DIVIDE  &trans
   &trans  &kp F5  &kp F6   &kp F7    &kp F8   &trans      &kp KP_PLUS      &kp N4  &kp N5      &kp N6  &kp KP_MINUS   &trans
   &trans  &kp F1  &kp F2   &kp F3    &kp F4   &trans      &trans           &kp N1  &kp N2      &kp N3  &trans         &trans
                            &to BASE  &trans   &trans      &kp KP_EQUAL     &kp N0  &kp KP_DOT
                        >;
                };

                exp_layer {
                        bindings = <
   &trans  &trans      &trans      &trans       &trans       &trans   &trans  &trans        &trans      &trans       &trans      &trans
   &trans  &mt LGUI A  &mt LALT R  &mt LCTRL S  &mt LSHFT T  &kp G    &kp M   &mt RSHIFT N  &mt RCTL E  &mt RALT I   &mt RGUI O  &trans
   &trans  &trans      &trans      &trans       &trans       &trans   &trans  &trans        &trans      &trans       &trans      &trans
                       &trans      &trans       &trans       &trans   &trans  &trans
                        >;
                };

        };

        combos {
        compatible = "zmk,combos";
        combo_tab {
            timeout-ms = <50>;
            key-positions = <14 15 16>;
            bindings = <&kp TAB>;
        };

        combo_del {
            timeout-ms = <50>;
            key-positions = <19 20 21>;
            bindings = <&kp DEL>;
        };

        combo_esc {
            timeout-ms = <20>;
            key-positions = <15 16>;
            bindings = <&kp ESC>;
        };

        combo_RET {
            timeout-ms = <20>;
            key-positions = <20 21>;
            bindings = <&kp RET>;
        };

        combo_bspc {
            timeout-ms = <20>;
            key-positions = <19 20>;
            bindings = <&kp BSPC>;
        };
    };
};
